# headless service to avoid deletion of patronidemo-config endpoint
apiVersion: v1
kind: Service
metadata:
  name: patronidemo-config
  labels:
    application: patroni
    cluster-name: patronidemoproduct
spec:
  clusterIP: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &cluster_name patronidemoproduct
  labels:
    application: patroni
    cluster-name: *cluster_name
spec:
  replicas: 3
  serviceName: *cluster_name
  selector:
    matchLabels:
      application: patroni
      cluster-name: *cluster_name
  template:
    metadata:
      labels:
        application: patroni
        cluster-name: *cluster_name
    spec:
      serviceAccountName: patronidemo
      containers:
      - name: *cluster_name
        image: patroni  # docker build -t patroni .
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - containerPort: 8008
          protocol: TCP
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /home/postgres/pgdata
          name: pgdata
        env:
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'true'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{application: patroni, cluster-name: patronidemoproduct}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: postgres
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: superuser-password
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: replication-password
        - name: PATRONI_SCOPE
          value: *cluster_name
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /home/postgres/pgdata/pgroot/data
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
      terminationGracePeriodSeconds: 0
      volumes:
      - name: pgdata
        emptyDir: {}
---
apiVersion: v1
kind: Endpoints
metadata:
  name: &cluster_name patronidemoproduct
  labels:
    application: patroni
    cluster-name: *cluster_name
subsets: []

---
apiVersion: v1
kind: Service
metadata:
  name: &cluster_name patronidemoproduct
  labels:
    application: patroni
    cluster-name: *cluster_name
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: patronidemoproduct-repl
  labels:
    application: patroni
    cluster-name:  &cluster_name patronidemoproduct
    role: replica
spec:
  type: ClusterIP
  selector:
    application: patroni
    cluster-name: *cluster_name
    role: replica
  ports:
  - port: 5432
    targetPort: 5432

---
apiVersion: v1
kind: Secret
metadata:
  name: &cluster_name patronidemoproduct
  labels:
    application: patroni
    cluster-name: *cluster_name
type: Opaque
data:
  superuser-password: emFsYW5kbw==
  replication-password: cmVwLXBhc3M=